{"version":3,"sources":["@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/10","src/change_detection/interfaces.js","@traceur/generated/TemplateParser/7","src/change_detection/@traceur/generated/TemplateParser/24","src/change_detection/@traceur/generated/TemplateParser/37","src/change_detection/@traceur/generated/TemplateParser/23"],"names":[],"mappings":"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","file":"src/change_detection/interfaces.js","sourceRoot":"/Users/deast/Angular/quickstart/node_modules/angular2/es6/prod/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {List} from 'angular2/src/facade/collection';\nimport {Locals} from './parser/locals';\n\nexport class ChangeRecord {\n  bindingMemento:any;\n  change:any;\n\n  constructor(bindingMemento, change) {\n    this.bindingMemento = bindingMemento;\n    this.change = change;\n  }\n\n  //REMOVE IT\n  get currentValue() {\n    return this.change.currentValue;\n  }\n\n  get previousValue() {\n    return this.change.previousValue;\n  }\n}\n\n\n/**\n * CHECK_ONCE means that after calling detectChanges the mode of the change detector\n * will become CHECKED.\n */\nexport const CHECK_ONCE=\"CHECK_ONCE\";\n\n/**\n * CHECKED means that the change detector should be skipped until its mode changes to\n * CHECK_ONCE or CHECK_ALWAYS.\n */\nexport const CHECKED=\"CHECKED\";\n\n/**\n * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector\n * will remain CHECK_ALWAYS.\n */\nexport const CHECK_ALWAYS=\"ALWAYS_CHECK\";\n\n/**\n * DETACHED means that the change detector sub tree is not a part of the main tree and\n * should be skipped.\n */\nexport const DETACHED=\"DETACHED\";\n\nexport class ChangeDispatcher {\n  onRecordChange(directiveMemento, records:List<ChangeRecord>) {}\n}\n\nexport class ChangeDetector {\n  parent:ChangeDetector;\n  mode:string;\n\n  addChild(cd:ChangeDetector) {}\n  removeChild(cd:ChangeDetector) {}\n  remove() {}\n  hydrate(context:any, locals:Locals) {}\n  dehydrate() {}\n  markPathToRootAsCheckOnce() {}\n\n  detectChanges() {}\n  checkNoChanges() {}\n}\n","$__export($__placeholder__0, $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)","assert.type.$__placeholder__0)"]}